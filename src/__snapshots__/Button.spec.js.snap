// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ButtonUI should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ButtonUI />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Userform
          isShow={false}
          myform={<Results />}
        />,
        <p>
           
        </p>,
        <WithStyles(Button)
          aria-label="Show and Hide the Form"
          color="primary"
          id="showme"
          onClick={[Function]}
          type="button"
          variant="contained"
        >
          Show/Hide Form
        </WithStyles(Button)>,
        <p
          className="green"
          id="myp"
        >
          (This is in Button.js)
        </p>,
        <div>
          <div>
            <WithStyles(Button)
              className="tbd"
              variant="contained"
            >
              Basic Button
            </WithStyles(Button)>
          </div>
        </div>,
      ],
      "className": "formstuff",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "isShow": false,
          "myform": <Results />,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": " ",
        },
        "ref": null,
        "rendered": " ",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "aria-label": "Show and Hide the Form",
          "children": "Show/Hide Form",
          "color": "primary",
          "id": "showme",
          "onClick": [Function],
          "type": "button",
          "variant": "contained",
        },
        "ref": null,
        "rendered": "Show/Hide Form",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "(This is in Button.js)",
          "className": "green",
          "id": "myp",
        },
        "ref": null,
        "rendered": "(This is in Button.js)",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div>
            <WithStyles(Button)
              className="tbd"
              variant="contained"
            >
              Basic Button
            </WithStyles(Button)>
          </div>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <WithStyles(Button)
              className="tbd"
              variant="contained"
            >
              Basic Button
            </WithStyles(Button)>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Basic Button",
              "className": "tbd",
              "variant": "contained",
            },
            "ref": null,
            "rendered": "Basic Button",
            "type": [Function],
          },
          "type": "div",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Userform
            isShow={false}
            myform={<Results />}
          />,
          <p>
             
          </p>,
          <WithStyles(Button)
            aria-label="Show and Hide the Form"
            color="primary"
            id="showme"
            onClick={[Function]}
            type="button"
            variant="contained"
          >
            Show/Hide Form
          </WithStyles(Button)>,
          <p
            className="green"
            id="myp"
          >
            (This is in Button.js)
          </p>,
          <div>
            <div>
              <WithStyles(Button)
                className="tbd"
                variant="contained"
              >
                Basic Button
              </WithStyles(Button)>
            </div>
          </div>,
        ],
        "className": "formstuff",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "isShow": false,
            "myform": <Results />,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": " ",
          },
          "ref": null,
          "rendered": " ",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "aria-label": "Show and Hide the Form",
            "children": "Show/Hide Form",
            "color": "primary",
            "id": "showme",
            "onClick": [Function],
            "type": "button",
            "variant": "contained",
          },
          "ref": null,
          "rendered": "Show/Hide Form",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "(This is in Button.js)",
            "className": "green",
            "id": "myp",
          },
          "ref": null,
          "rendered": "(This is in Button.js)",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div>
              <WithStyles(Button)
                className="tbd"
                variant="contained"
              >
                Basic Button
              </WithStyles(Button)>
            </div>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <WithStyles(Button)
                className="tbd"
                variant="contained"
              >
                Basic Button
              </WithStyles(Button)>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Basic Button",
                "className": "tbd",
                "variant": "contained",
              },
              "ref": null,
              "rendered": "Basic Button",
              "type": [Function],
            },
            "type": "div",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
